name: Monorepo pipeline - push

on:
  push:
    branches:
      - 'master'
      - 'release/**'
      - 'hotfix/**'
    paths-ignore:
      - '**/*.md'
    tags:
      - docker-build-*
  workflow_dispatch:
  create:

env:
  DOCKER_REGISTRY: 821090935708.dkr.ecr.eu-west-1.amazonaws.com/

jobs:
  pre-checks:
    name: Check if job should run
    env:
      CREATE_PATTERNS: ^release/,^hotfix/
    outputs:
      GIT_BRANCH: ${{ steps.git-branch.outputs.GIT_BRANCH }}
    steps:
      - name: Get git branch
        id: git-branch
        run: |
          GIT_BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF/refs\/heads\//}}"
          echo "::set-output name=GIT_BRANCH::${GIT_BRANCH}"
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
      - name: Check if we want to run workflow
        run: |
          echo "GITHUB_EVENT_NAME is '$GITHUB_EVENT_NAME'"
          if [[ "$GITHUB_EVENT_NAME" == "create" ]]; then
            echo "Workflow was created because of branch creation. Branch name is '$GIT_BRANCH'"

            for pattern in $(echo $CREATE_PATTERNS | sed "s/,/ /g")
            do
                echo "Checking branch against pattern '$pattern'"
                if [[ "$GIT_BRANCH" =~ $pattern ]]; then
                  echo "'$GIT_BRANCH' matches '$pattern', continuing with build"
                  exit 0
                fi
            done
            echo "No pattern matches '$GIT_BRANCH', exiting with exit code 1"
            exit 1
          fi
  prepare:
    runs-on: ubuntu-20.04
    timeout-minutes: 30

    needs:
      - pre-checks

    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      GIT_BRANCH: ${{ needs.pre-checks.outputs.GIT_BRANCH }}

    outputs:
      DOCKER_TAG: ${{ steps.docker_tags.outputs.DOCKER_TAG }}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ steps.git_nx_base.outputs.LAST_GOOD_BUILD_DOCKER_TAG }}
      UNAFFECTED: ${{ steps.unaffected.outputs.UNAFFECTED }}
      BUILD_MAP: ${{ steps.build_map.outputs.BUILD_MAP }}
      node-modules-hash: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}
      generated-files-cache-key: ${{ steps.calculate_generated_files_cache_key.outputs.generated-files-cache-key }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git refs
        id: git_refs
        run: |
          if [[ ! -z "$GITHUB_BASE_REF" ]]
          then
           # a PR
           GIT_BASE_BRANCH=$GITHUB_BASE_REF
          else
           # on master
           GIT_BASE_BRANCH=master
          fi
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
          echo "GIT_BASE_BRANCH=$GIT_BASE_BRANCH" >> $GITHUB_ENV
          echo "Base branch is '${GIT_BASE_BRANCH}'"
          echo "Branch is '${GIT_BRANCH}'"

      - name: Generate docker image tag
        id: docker_tags
        run: |
          export DOCKER_BRANCH_TAG=$(echo ${GIT_BRANCH} | tr "/." "-" )
          export DOCKER_TAG=${GITHUB_RUN_NUMBER}_${DOCKER_BRANCH_TAG}_${GITHUB_SHA:0:7}
          echo "Docker tag will be ${DOCKER_TAG}"
          echo "::set-output name=DOCKER_TAG::${DOCKER_TAG}"
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV

      - run: |
          echo "HEAD=$GITHUB_SHA" >> $GITHUB_ENV
        id: git_nx_head
        name: Preparing HEAD tag

      - run: |
          source ./scripts/ci/00_prepare-base-tags.sh
          echo "BASE=$BASE" >> $GITHUB_ENV
          echo "::set-output name=LAST_GOOD_BUILD_DOCKER_TAG::${LAST_GOOD_BUILD_DOCKER_TAG}"
        id: git_nx_base
        name: Preparing BASE tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate cache key for node_modules
        id: calculate_node_modules_hash
        run: |
          PACKAGE_JSON_HASH=$(cat package.json | jq '{resolutions,dependencies,devDependencies}' | sha1sum -t | cut -f1 -d" ")
          echo "PACKAGE_JSON_HASH: $PACKAGE_JSON_HASH"
          export NODE_MODULES_HASH=${{ runner.os }}-${{ hashFiles('yarn.lock') }}-$PACKAGE_JSON_HASH
          echo "NODE_MODULES_HASH: $NODE_MODULES_HASH"
          echo "::set-output name=node-modules-hash::$NODE_MODULES_HASH"

      - name: Calculate cache keys for generated files
        id: calculate_generated_files_cache_key
        run: |
          export HASH=${{ hashFiles('scripts/generate-schemas.js', 'libs/api/domains/cms/src/lib/generated/contentfulTypes.d.ts', 'apps/**/codegen.yml', 'apps/**/modules/**.ts?', 'libs/**/modules/**.ts?', 'apps/**/models/**.ts?', 'libs/**/models/**.ts?', 'apps/**/dto/**.ts?', 'libs/**/dto/**.ts?', 'apps/**/enums/**.ts?', 'libs/**/enums/**.ts?', 'apps/**/queries/**.ts?', 'libs/**/queries/**.ts?', 'apps/**/*.model.ts', 'libs/**/*.model.ts', 'apps/**/*.resolver.ts', 'libs/**/*.resolver.ts', 'apps/**/*.service.ts', 'libs/**/*.service.ts', 'apps/air-discount-scheme/web/screens/**/*.tsx', 'apps/air-discount-scheme/web/i18n/withLocale.tsx', 'apps/air-discount-scheme/web/components/AppLayout/AppLayout.tsx', 'apps/air-discount-scheme/web/components/Header/Header.tsx', 'apps/gjafakort/api/src/**/typeDefs.ts') }}
          export GENERATED_FILES_KEY=${{ runner.os }}-$HASH-generated-files
          echo "GENERATED_FILES_KEY: $GENERATED_FILES_KEY"
          echo "::set-output name=generated-files-cache-key::$GENERATED_FILES_KEY"

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Cache for NodeJS dependencies - Docker layer
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}-docker-deps

      - name: Cache for NodeJS dependencies - Docker layer
        id: cache-deps-base
        uses: actions/cache@v2
        with:
          path: cache_output
          key: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}-docker-output-base

      - name: Building NodeJS dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true' || steps.cache-deps-base.outputs.cache-hit != 'true'
        run: ./scripts/ci/10_prepare-docker-deps.sh

      - name: Cache for NodeJS dependencies - host OS
        id: node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ steps.calculate_node_modules_hash.outputs.node-modules-hash }}-yarn

      - name: Building NodeJS dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: ./scripts/ci/10_prepare-host-deps.sh

      - name: set BRANCH env var
        run: echo "BRANCH=$GIT_BRANCH" >> $GITHUB_ENV

      - name: Cache for generated files
        id: generated-files-cache
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ steps.calculate_generated_files_cache_key.outputs.generated-files-cache-key }}

      - name: Generate schemas
        if: steps.generated-files-cache.outputs.cache-hit != 'true'
        run: tar zcvf generated_files.tar.gz $(./scripts/ci/get-files-touched-by.sh yarn schemas --all | xargs realpath --relative-to $(pwd))

      - name: Prepare docker build targets
        id: build_map
        run: |
          MAP=$(./scripts/ci/generate-build-map.sh docker-express docker-next docker-static)
          echo "MAP: '$MAP'"
          echo "::set-output name=BUILD_MAP::$MAP"

      - name: Gather unaffected docker images
        id: unaffected
        run: |
          UNAFFECTED=$(./scripts/ci/list-unaffected.sh docker-next docker-express docker-static)
          echo "::set-output name=UNAFFECTED::$UNAFFECTED"

  docker-build:
    needs:
      - prepare
    runs-on: ubuntu-20.04
    timeout-minutes: 35
    env:
      AFFECTED_ALL: ${{ secrets.AFFECTED_ALL }}
      GIT_BRANCH: ${{ needs.pre-checks.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      MAX_JOBS: 4
      PUBLISH: true
    strategy:
      fail-fast: false
      matrix:
        docker-type:
          - express
          - next
          - static
    steps:
      - name: Gather apps
        id: gather
        run: |
          AFFECTED_PROJECTS=$(echo '${{ needs.prepare.outputs.BUILD_MAP }}' | jq -r '.["docker-${{ matrix.docker-type }}"]')
          if [[ "$AFFECTED_PROJECTS" == "null" ]]; then
            # Early exit
            exit 1
          fi
          echo "AFFECTED_PROJECTS=$AFFECTED_PROJECTS" >> $GITHUB_ENV
        continue-on-error: true
      - uses: actions/checkout@v2
        if: steps.gather.outcome == 'success'
      - name: Cache for generated files
        if: steps.gather.outcome == 'success'
        uses: actions/cache@v2
        with:
          path: generated_files.tar.gz
          key: ${{ needs.prepare.outputs.generated-files-cache-key }}

      - name: Untar generated files
        if: steps.gather.outcome == 'success'
        run: tar zxvf generated_files.tar.gz

      - name: Cache for dependencies Docker layer
        if: steps.gather.outcome == 'success'
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: cache_output
          key: ${{ needs.prepare.outputs.node-modules-hash }}-docker-output-base

      - name: Cache for NodeJS dependencies - Docker layer
        if: steps.gather.outcome == 'success'
        uses: actions/cache@v2
        with:
          path: cache
          key: ${{ needs.prepare.outputs.node-modules-hash }}-docker-deps

      - name: Docker login to ECR repo
        if: steps.gather.outcome == 'success'
        run: ./scripts/ci/docker-login-ecr.sh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Set up Docker Buildx
        if: steps.gather.outcome == 'success'
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: v0.4.1
          qemu-version: latest

      - name: Building Docker images
        if: steps.gather.outcome == 'success'
        run: ./scripts/ci/run-in-parallel.sh 90_docker-${{ matrix.docker-type }}

  retag-unaffected:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    needs:
      - docker-build
      - prepare
    env:
      GIT_BRANCH: ${{ needs.pre-checks.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
      LAST_GOOD_BUILD_DOCKER_TAG: ${{ needs.prepare.outputs.LAST_GOOD_BUILD_DOCKER_TAG}}
      UNAFFECTED: ${{ needs.prepare.outputs.UNAFFECTED}}

    steps:
      - uses: actions/checkout@v2
      - name: Retag unaffected Docker images
        run: ./scripts/ci/retag-unaffected.sh "$UNAFFECTED"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    runs-on: ubuntu-20.04
    needs:
      - retag-unaffected
      - prepare
    env:
      GIT_BRANCH: ${{ needs.pre-checks.outputs.GIT_BRANCH}}
      DOCKER_TAG: ${{ needs.prepare.outputs.DOCKER_TAG}}
    strategy:
      matrix:
        service:
          - islandis
          - gjafakort
          - air-discount-scheme
    steps:
      - uses: actions/checkout@v2
      - name: Trigger Deployment for service
        env:
          SPINNAKER_URL: https://spinnaker-gate.shared.devland.is
          SPINNAKER_WEBHOOK_TOKEN: ${{ secrets.SPINNAKER_WEBHOOK_TOKEN }}
        run: |
          curl -v $SPINNAKER_URL/webhooks/webhook/${{matrix.service}} -H "content-type: application/json" --data-binary @- <<BODY
          {
          "token": "$SPINNAKER_WEBHOOK_TOKEN",
          "branch": "$GIT_BRANCH",
          "parameters": { "docker_tag": "$DOCKER_TAG" }
          }
          BODY

  success:
    runs-on: ubuntu-20.04
    needs:
      - deploy
    steps:
      - name: Announce success
        run: echo "Build is successful"

  failure-notification:
    runs-on: ubuntu-20.04
    if: failure()
    needs:
      - prepare
      - docker-build
      - retag-unaffected
      - deploy
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          icon_emoji: ':broken_heart:'
          fields: repo,message,commit,author,action,eventName,ref,workflow,took # selectable (default: repo,message)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
