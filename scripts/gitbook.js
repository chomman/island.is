const fs = require('fs')
const path = require('path')

/**
 * This script create the SUMMARY.md file used by GitBook to create its table of contents.
 * Since we have many project and libs instead of doing it manually, we run a script to get all the .md files inside the apps and libs folders and sub-folders.
 *
 * When pick by the script, we use the first line of the readme to define the name of the GitBook page.
 *
 * If a README.md is not worth being listed in GitBook, use the HTML comment `<!-- gitbook-ignore -->` on the first line of the file.
 *
 * Below are defined the static pages inside the handbook directory. You can add new pages there.
 *
 * To run this script, do `yarn gitbook`
 */

const content = (
  apps,
  libs,
) => `<!-- This file is automatically generated with \`yarn gitbook\` (scripts/gitbook.js), please do not modify this file directly -->

# Table of contents

- [Getting started](README.md)

## Technical overview

- [Overview](handbook/technical-overview/README.md)
- [Technical direction](handbook/technical-overview/technical-direction.md)
- [Teamwork](handbook/technical-overview/teamwork.md)
- [Monorepo](handbook/technical-overview/monorepo.md)
- [Code standards](handbook/technical-overview/code-standards.md)
- [Code reviews](handbook/technical-overview/code-reviews.md)
- [Personas](handbook/technical-overview/personas.md)
- [API Design Guide](handbook/technical-overview/api-design-guide/README.md)
  - [Versioning](handbook/technical-overview/api-design-guide/versioning.md)
  - [Resource Oriented Design](handbook/technical-overview/api-design-guide/resource-oriented-design.md)
  - [Documentation](handbook/technical-overview/api-design-guide/documentation.md)
  - [Once Only Principle](handbook/technical-overview/api-design-guide/once-only.md)
  - [GraphQL naming conventions](handbook/technical-overview/api-design-guide/graphql-naming-conventions.md)
  - [Security](handbook/technical-overview/api-design-guide/security.md)
  - [Environments](handbook/technical-overview/api-design-guide/environments.md)
  - [Naming Conventions](handbook/technical-overview/api-design-guide/naming-conventions.md)
  - [Data Definitions and Standards](handbook/technical-overview/api-design-guide/data-definitions.md)
  - [Methods](handbook/technical-overview/api-design-guide/methods.md)
  - [HTTP Status Response codes](handbook/technical-overview/api-design-guide/http-status-codes.md)
  - [Example API Service](handbook/technical-overview/api-design-guide/example.md)
  - [Error Handling](handbook/technical-overview/api-design-guide/errors.md)
- [Architectural Decision Records](handbook/technical-overview/adr/README.md)
  - [Open Source License](handbook/technical-overview/adr/0011-open-source-license.md)
  - [CMS](handbook/technical-overview/adr/0010-cms.md)
  - [Unified naming strategy for files and directories](handbook/technical-overview/adr/0009-naming-files-and-directories.md)
  - [Use OAuth 2.0 and OpenID Connect as protocols for Authentication and Authorization](handbook/technical-overview/adr/0008-use-oauth-and-openid-connect.md)
  - [Viskuausan Static Site Generator](handbook/technical-overview/adr/0007-viskuausan-static-site-generator.md)
  - [What API Management tool to consider](handbook/technical-overview/adr/0006-what-api-management-tool-to-consider.md)
  - [Error tracking and monitoring](handbook/technical-overview/adr/0005-error-tracking-and-monitoring.md)
  - [Branching and release strategy](handbook/technical-overview/adr/0004-branching-and-release-strategy.md)
  - [CSS](handbook/technical-overview/adr/0003-css.md)
  - [Continuous Integration](handbook/technical-overview/adr/0002-continuous-integration.md)
  - [Use NX](handbook/technical-overview/adr/0001-use-nx.md)
  - [Use Markdown Architectural Decision Records](handbook/technical-overview/adr/0000-use-markdown-architectural-decision-records.md)
  - [ADR Template](handbook/technical-overview/adr/template.md)
- [Devops](handbook/technical-overview/devops/README.md)
  - [Operations base principles](handbook/technical-overview/devops/operations-base-principles.md)
  - [Continuous Delivery](handbook/technical-overview/devops/continuous-delivery.md)
  - [Dockerizing](handbook/technical-overview/devops/dockerizing.md)
  - [Metrics](handbook/technical-overview/devops/metrics.md)
  - [Environment setup](handbook/technical-overview/devops/environment-setup.md)
  - [Observability](handbook/technical-overview/devops/observability.md)
  - [Logging](handbook/technical-overview/devops/logging.md)

## Repository

- [Generate a new project](handbook/repository/generate.md)
- [Schemas](handbook/repository/schemas.md)

## Projects

${apps.map((item) => `- [${item.name}](${item.path})\n`).join('')}
## Libs

${libs.map((item) => `- [${item.name}](${item.path})\n`).join('')}
## Misc

- [GitBook template](handbook/misc/gitbook-template.md)
- [Glossary](handbook/misc/glossary.md)
`

const fromDir = async (startPath, res = []) => {
  if (!fs.existsSync(startPath)) {
    return
  }

  var files = fs.readdirSync(startPath)

  for (var file in files) {
    var filename = path.join(startPath, files[file])
    var stat = fs.lstatSync(filename)

    if (stat.isDirectory()) {
      fromDir(filename, res)
    } else if (/\.md$/.test(filename)) {
      const file = fs.readFileSync(filename, 'utf-8')
      const lines = file.split('\n')
      const firstLine = lines[0] && lines[0]

      if (firstLine === '<!-- gitbook-ignore -->') {
        return
      }

      res.push({
        name: firstLine.replace('# ', ''),
        path: filename,
      })
    }
  }

  return res
}

const run = async () => {
  const apps = await fromDir('./apps')
  const libs = await fromDir('./libs')

  fs.writeFileSync('SUMMARY.md', content(apps, libs))
}

run()
